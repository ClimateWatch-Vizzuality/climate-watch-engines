ActiveAdmin.register_page '<%= "#{platform.humanize} Platform #{section.humanize}" %>' do
  include SharedAdmin

  section_name = '<%= @section %>'
  platform_name = '<%= @platform %>_platform'

  controller do
    def section_name
      '<%= @section %>'
    end

    def platform_name
      '<%= @platform %>'
    end

    def s3_folder_path
      "#{CW_FILES_PREFIX_TEST}<%= @section %>"
    end

    def path
      admin_<%= @platform %>_<%= @section %>_path
    end

    def section
      section_repository.filter_by_section_and_platform(
          section_name,
          platform_name
      )
    end

    def import_worker
      <%= @worker %>.perform_async(section.id)
    end

    def section_repository
      @section_repository ||= SectionRepository.new
    end

    def dataset_repository
      @dataset_repository ||= DatasetRepository.new
    end
  end

  menu parent: 'Data Uploader',
       label: section_name.split('_').map(&:capitalize).join(' '),
       if: proc { Admin::Ability.can_view?(platform_name) }

  section = SectionRepository.new.filter_by_section_and_platform(
      section_name,
      platform_name
  )

  datasets = DatasetRepository.new.filter_by_section(section.id)

  content do
    render partial: 'admin/form_upload_datasets', locals: {
        datasets: datasets,
        upload_path: admin_<%= @platform %>_<%= @section.pluralize %>>_upload_datafile_path,
        download_path: admin_<%= @platform %>>_<%= @section.pluralize %>_download_datafiles_path,
        download_single_data_file_path:
            admin_<%= @platform %>_<%= @section.pluralize %>_download_datafile_path,
        import_path: admin_<%= @platform %>_<%= @section.pluralize %>_run_importer_path,
        import_button_disabled: section.worker_logs.started.any?,
        logs: section.worker_logs.order(created_at: :desc)
    }
  end
end
